package primitives

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

// TestCrossCompatibility31ByteKey tests that the Go SDK can decrypt
// ciphertext generated by the TypeScript SDK with a 31-byte key
func TestCrossCompatibility31ByteKey(t *testing.T) {
	// Use the same 31-byte key as TypeScript
	privKey, err := PrivateKeyFromWif("L4B2postXdaP7TiUrUBYs53Fqzheu7WhSoQVPuY8qBdoBeEwbmZx")
	require.NoError(t, err, "Failed to create private key")

	pubKey := privKey.PubKey()
	keyBytes := pubKey.X.Bytes()

	// Verify this is a 31-byte key
	require.Equal(t, 31, len(keyBytes), "Expected 31-byte key")

	symmetricKey := NewSymmetricKey(keyBytes)
	expectedPlaintext := []byte("cross-sdk test message")

	// Test cases: TypeScript-generated ciphertext that Go should be able to decrypt
	testCases := []struct {
		name          string
		ciphertextHex string
	}{
		{
			name:          "TS 31-byte ciphertext 1",
			ciphertextHex: "c374d70a4623036f1dd7b971dbeeea375630dc1da40e7068f4c4aa03487d3b19de3afb26a29173deccfbb1ece4fee6c92406b25948e6fe9cb53383057cb826d0a20269e290bd",
		},
		{
			name:          "TS 31-byte ciphertext 2",
			ciphertextHex: "1025d330504549601a611b75af4450722353f431ca2fc3f6aed41ca7b53e7859fa9cfea4654c871668449308c420282b372c1008dcd7a21fb5b1410c4f3a913c74c86a1aa070",
		},
		{
			name:          "TS 31-byte ciphertext 3",
			ciphertextHex: "efb87383667dda0bca519acb50a264cb958447f6d0f5cb20adace5fae8e812d4c39b569ad8a64ba70ca5a941d8096ded43a45cde8eec16b6a396112c248effce132797a73698",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Decode the hex ciphertext
			ciphertext, err := hex.DecodeString(tc.ciphertextHex)
			require.NoError(t, err, "Failed to decode hex ciphertext")

			// Decrypt using Go SDK
			decrypted, err := symmetricKey.Decrypt(ciphertext)
			require.NoError(t, err, "Failed to decrypt TypeScript ciphertext with Go SDK")
			require.Equal(t, expectedPlaintext, decrypted, "Decrypted text doesn't match expected")
		})
	}

	// Generate Go ciphertext and verify TypeScript can decrypt it (informational)
	t.Run("Generate Go ciphertext for TypeScript", func(t *testing.T) {
		goCiphertext, err := symmetricKey.Encrypt(expectedPlaintext)
		require.NoError(t, err, "Failed to encrypt with Go SDK")

		// Verify Go can decrypt its own ciphertext
		goDecrypted, err := symmetricKey.Decrypt(goCiphertext)
		require.NoError(t, err, "Failed to decrypt Go ciphertext with Go SDK")
		require.Equal(t, expectedPlaintext, goDecrypted, "Go self-decryption failed")
	})
}

// TestCrossCompatibility32ByteKey tests that the Go SDK can decrypt
// phertext generated by the TypeScript SDK with a 32-byte key
func TestCrossCompatibility32ByteKey(t *testing.T) {
	// Use the same 32-byte key as TypeScript
	privKey, err := PrivateKeyFromWif("KyLGEhYicSoGchHKmVC2fUx2MRrHzWqvwBFLLT4DZB93Nv5DxVR9")
	require.NoError(t, err, "Failed to create private key")

	pubKey := privKey.PubKey()
	keyBytes := pubKey.X.Bytes()

	// Verify this is a 32-byte key
	require.Equal(t, 32, len(keyBytes), "Expected 32-byte key")

	symmetricKey := NewSymmetricKey(keyBytes)
	expectedPlaintext := []byte("cross-sdk test message")

	// Test cases: TypeScript-generated ciphertext that Go should be able to decrypt
	testCases := []struct {
		name          string
		ciphertextHex string
	}{
		{
			name:          "TS 32-byte ciphertext 1",
			ciphertextHex: "2059fc32910bef280d89c4c7edbbc587b31be22339e609fdcc23319bf458840a91ad1b2da87aea13a5dc5cb3469b41c52001070b8003863843978acbdf57755b24491581a059",
		},
		{
			name:          "TS 32-byte ciphertext 2",
			ciphertextHex: "b6b751277049399fdf5d35fda899c8433509268b0528c25ac8cf60c23dbeef23441c9efcdb996312c6aa32352637789bcf19d02b990903003a9a894efe874a65e84b6e57d30b",
		},
		{
			name:          "TS 32-byte ciphertext 3",
			ciphertextHex: "d7df30523828585d80614ebf219133bdd624b7e0af443af6352176cf2e5a76f5fbd08c1818fb582df8db2f2deb1c5f57356c279919b974c9432cec20cc16975718dd4066d485",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Decode the hex ciphertext
			ciphertext, err := hex.DecodeString(tc.ciphertextHex)
			require.NoError(t, err, "Failed to decode hex ciphertext")

			// Decrypt using Go SDK
			decrypted, err := symmetricKey.Decrypt(ciphertext)
			require.NoError(t, err, "Failed to decrypt TypeScript ciphertext with Go SDK")
			require.Equal(t, expectedPlaintext, decrypted, "Decrypted text doesn't match expected")
		})
	}

	// Generate Go ciphertext and verify TypeScript can decrypt it (informational)
	t.Run("Generate Go ciphertext for TypeScript", func(t *testing.T) {
		goCiphertext, err := symmetricKey.Encrypt(expectedPlaintext)
		require.NoError(t, err, "Failed to encrypt with Go SDK")

		// Verify Go can decrypt its own ciphertext
		goDecrypted, err := symmetricKey.Decrypt(goCiphertext)
		require.NoError(t, err, "Failed to decrypt Go ciphertext with Go SDK")
		require.Equal(t, expectedPlaintext, goDecrypted, "Go self-decryption failed")
	})
}

// TestBidirectionalCrossCompatibility tests that both SDKs can decrypt each other's ciphertext
func TestBidirectionalCrossCompatibility(t *testing.T) {
	testCases := []struct {
		name              string
		wif               string
		expectedKeyLength int
		goCiphertext      string
		tsCiphertext      string
	}{
		{
			name:              "31-byte key bidirectional",
			wif:               "L4B2postXdaP7TiUrUBYs53Fqzheu7WhSoQVPuY8qBdoBeEwbmZx",
			expectedKeyLength: 31,
			goCiphertext:      "7604d5bdb0eb843051d21873c871c9b1507c3de7ba222e1b407c163c2c166277df95de73be9534a2caf9d4b72157f78e5e2e69d97bc25b18ff4cfbd61a1306c02c0b8b2d165e",
			tsCiphertext:      "c374d70a4623036f1dd7b971dbeeea375630dc1da40e7068f4c4aa03487d3b19de3afb26a29173deccfbb1ece4fee6c92406b25948e6fe9cb53383057cb826d0a20269e290bd",
		},
		{
			name:              "32-byte key bidirectional",
			wif:               "KyLGEhYicSoGchHKmVC2fUx2MRrHzWqvwBFLLT4DZB93Nv5DxVR9",
			expectedKeyLength: 32,
			goCiphertext:      "d7744c85ad3dafcb9fc5752ab0d04c40f87084e8a466f6b6013ebe0fc5170daab8184aaef66ab2c2733f01c0dc3de322ba3ddeea976499548bc6ec166581181f919c69aa2de5",
			tsCiphertext:      "2059fc32910bef280d89c4c7edbbc587b31be22339e609fdcc23319bf458840a91ad1b2da87aea13a5dc5cb3469b41c52001070b8003863843978acbdf57755b24491581a059",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Create symmetric key
			privKey, err := PrivateKeyFromWif(tc.wif)
			require.NoError(t, err, "Failed to create private key")

			keyBytes := privKey.PubKey().X.Bytes()
			require.Equal(t, tc.expectedKeyLength, len(keyBytes), "Unexpected key length")

			symmetricKey := NewSymmetricKey(keyBytes)
			expectedPlaintext := []byte("cross-sdk test message")

			// Test Go decrypting TypeScript ciphertext
			tsCiphertext, err := hex.DecodeString(tc.tsCiphertext)
			require.NoError(t, err, "Failed to decode TypeScript ciphertext")

			tsDecrypted, err := symmetricKey.Decrypt(tsCiphertext)
			require.NoError(t, err, "Failed to decrypt TypeScript ciphertext with Go SDK")
			require.Equal(t, expectedPlaintext, tsDecrypted, "TypeScript→Go decryption failed")

			// Test Go decrypting Go ciphertext (sanity check)
			goCiphertext, err := hex.DecodeString(tc.goCiphertext)
			require.NoError(t, err, "Failed to decode Go ciphertext")

			goDecrypted, err := symmetricKey.Decrypt(goCiphertext)
			require.NoError(t, err, "Failed to decrypt Go ciphertext with Go SDK")
			require.Equal(t, expectedPlaintext, goDecrypted, "Go→Go decryption failed")
		})
	}
}
